// ------------------------------------
//    #MIXINS
// ------------------------------------

// Global mixins available to the entire project. Define file-specific
// mixins inside the file to which they relate.


// Mixin to drop micro clearfix into a selector.
//
// .simple-usage {
//   @include clearfix;
// }
//
// .detailed-usage {
//   @include clearfix(important);
// }

@mixin clearfix {
    &:after {
        display: table;
        content: '';
        clear: both;
    }
}

@mixin default-space {
    margin-bottom: $size-space-default;

    &:last-child {
        margin-bottom: 0;
    }
}

@mixin hover {
    .no-touch &:hover {
        @content;
    }
}

// Generate `:hover` and `:focus` styles in one go.
@mixin hocus() {
  &:hover,
  &:focus {
    @content;
  }
}
// enable/disable font smoothing
@mixin font-smoothing($toggle: true) {
    @if ($toggle == true) {
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    } @else {
        -webkit-font-smoothing: subpixel-antialiased;
        -moz-osx-font-smoothing: auto;
    }
}

@mixin font-smoothing-off {
    @include font-smoothing(false);
}

// add arrow to block element
@mixin arrow($orientation: 'up', $color: #000, $size: 1em) {

    position: relative;

    &:after {
        position: absolute;
        content: '';
        border-color: $color;

        width: 0;
        height: 0;
        z-index: 7;

        @if ($orientation == 'up') {

            top: auto;
            bottom: 100%;
            left: 1.5 * $size;

            border-top: 0;
            border-left: $size solid transparent;
            border-right: $size solid transparent;

            border-bottom-width: $size;
            border-bottom-style: solid;

        } @else if ($orientation == 'down') {

            border-bottom: 0;
            border-left: $size solid transparent;
            border-right: $size solid transparent;

            border-top-width: $size;
            border-top-style: solid;

        } @else if ($orientation == 'right') {

            left: 100%;
            top: 1.5 * $size;

            border-right: 0;
            border-top: $size solid transparent;
            border-bottom: $size solid transparent;

            border-left-width: $size;
            border-left-style: solid;

        } @else if ($orientation == 'left') {

            right: 100%;
            top: 1.5 * $size;

            border-left: 0;
            border-top: $size solid transparent;
            border-bottom: $size solid transparent;

            border-right-width: $size;
            border-right-style: solid;

        }

    }

}

// ratio
@mixin aspect-ratio($width, $height) {
    position: relative;
    overflow: hidden;

    &:before {
        display: block;
        content: "";
        width: 100%;
        // See functions
        padding-top: ratio($width, $height);
    }

    > .ratio__content {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
    }

    .ratio__image {
        display: block;
        min-height: 101%;
        min-width: 100%;
        position: absolute;
        left:0;
        top: 50%;
        transform: translateY(-50%);
        object-fit: cover;
    }
}
